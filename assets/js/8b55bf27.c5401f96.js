"use strict";(self.webpackChunkdasarpemrogramanrust=self.webpackChunkdasarpemrogramanrust||[]).push([[9886],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=o(n),k=i,c=u["".concat(p,".").concat(k)]||u[k]||m[k]||r;return n?a.createElement(c,l(l({ref:t},d),{},{components:n})):a.createElement(c,l({ref:t},d))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var o=2;o<r;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5877:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>o});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:45,title:"A.45. Tipe Data \u279c String Custom Type",sidebar_label:"A.45. Tipe Data \u279c String Custom Type"},l=void 0,s={unversionedId:"basic/tipe-data-custom-type-string-slice",id:"basic/tipe-data-custom-type-string-slice",title:"A.45. Tipe Data \u279c String Custom Type",description:"Pembahasan kali ini lingkupnya masih dalam topik custom type String.",source:"@site/docs/basic/tipe-data-custom-type-string-slice.md",sourceDirName:"basic",slug:"/basic/tipe-data-custom-type-string-slice",permalink:"/basic/tipe-data-custom-type-string-slice",draft:!1,tags:[],version:"current",sidebarPosition:45,frontMatter:{sidebar_position:45,title:"A.45. Tipe Data \u279c String Custom Type",sidebar_label:"A.45. Tipe Data \u279c String Custom Type"},sidebar:"tutorialSidebar",previous:{title:"A.44. String Literal (&str) vs. String Custom Type",permalink:"/basic/string-slice-vs-string-literal"},next:{title:"A.46. Closures",permalink:"/basic/closures"}},p={},o=[{value:"A.45.1. Pembuatan string slice",id:"a451-pembuatan-string-slice",level:2},{value:"\u25c9 Method <code>to_string</code> milik <code>&amp;str</code>",id:"-method-to_string-milik-str",level:3},{value:"\u25c9 <code>String::from</code>",id:"-stringfrom",level:3},{value:"\u25c9 <code>String::new</code>",id:"-stringnew",level:3},{value:"\u25c9 <code>String::from_utf8</code>",id:"-stringfrom_utf8",level:3},{value:"A.45.2. String mutability",id:"a452-string-mutability",level:2},{value:"\u25c9 Keyword <code>mut</code>",id:"-keyword-mut",level:3},{value:"\u25c9 Replace string / method <code>replace</code>",id:"-replace-string--method-replace",level:3},{value:"\u25c9 Prepend string / method <code>insert_str</code>",id:"-prepend-string--method-insert_str",level:3},{value:"\u25c9 Prepend char / method <code>insert</code>",id:"-prepend-char--method-insert",level:3},{value:"\u25c9 Append string / method <code>push_str</code>",id:"-append-string--method-push_str",level:3},{value:"\u25c9 Append char / method <code>push</code>",id:"-append-char--method-push",level:3},{value:"\u25c9 Clear string / method <code>clear</code>",id:"-clear-string--method-clear",level:3},{value:"A.45.3. Operasi string lainnya",id:"a453-operasi-string-lainnya",level:2},{value:"\u25c9 Cek substring / method <code>contains</code>",id:"-cek-substring--method-contains",level:3},{value:"\u25c9 Concat strings / slice <code>join</code>",id:"-concat-strings--slice-join",level:3},{value:"Catatan chapter \ud83d\udcd1",id:"catatan-chapter-",level:2},{value:"\u25c9 Source code praktik",id:"-source-code-praktik",level:3},{value:"\u25c9 Chapter relevan lainnya",id:"-chapter-relevan-lainnya",level:3},{value:"\u25c9 Referensi",id:"-referensi",level:3}],d={toc:o};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Pembahasan kali ini lingkupnya masih dalam topik custom type ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),"."),(0,i.kt)("p",null,"Penulis rasa 2 chapter terakhir sudah cukup banyak menjelaskan perihal apa itu tipe data ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),", apa perbedaannya dibanding ",(0,i.kt)("inlineCode",{parentName:"p"},"&str"),", dan kapan harus menggunakannya."),(0,i.kt)("blockquote",null,(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"Pembahasan mengenai perbedaan ",(0,i.kt)("inlineCode",{parentName:"li"},"String")," vs ",(0,i.kt)("inlineCode",{parentName:"li"},"&str")," bisa dilihat pada chapter ",(0,i.kt)("a",{parentName:"li",href:"/basic/string-slice-vs-string-literal"},"String Literal (&str) vs. String Custom Type")),(0,i.kt)("li",{parentName:"ul"},"Pembahasan tentang bagaimana data pada string slice di-manage di memory bisa dilihat pada chapter ",(0,i.kt)("a",{parentName:"li",href:"/basic/slice-memory-management"},"Slice Memory Management")))),(0,i.kt)("p",null,"Chapter ini akan lebih fokus ke fitur yang tersedia pada tipe ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),"."),(0,i.kt)("h2",{id:"a451-pembuatan-string-slice"},"A.45.1. Pembuatan string slice"),(0,i.kt)("p",null,"Ada banyak cara yang bisa digunakan dalam membuat data ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),", di antaranya:"),(0,i.kt)("h3",{id:"-method-to_string-milik-str"},"\u25c9 Method ",(0,i.kt)("inlineCode",{parentName:"h3"},"to_string")," milik ",(0,i.kt)("inlineCode",{parentName:"h3"},"&str")),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"to_string")," milik ",(0,i.kt)("inlineCode",{parentName:"p"},"&str")," mengkonversi string literal menjadi ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let str2 = "iPhone 8".to_string();\nprintln!("{str2}"); // iPhone 8\n')),(0,i.kt)("h3",{id:"-stringfrom"},"\u25c9 ",(0,i.kt)("inlineCode",{parentName:"h3"},"String::from")),(0,i.kt)("p",null,"Associated function ",(0,i.kt)("inlineCode",{parentName:"p"},"String::from")," digunakan untuk mengkonversi ",(0,i.kt)("inlineCode",{parentName:"p"},"&str")," ke bentuk ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),". Kita sudah cukup sering menggunakan fungsi ini."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let str1 = String::from("Nokia 3310");\nprintln!("{str1}"); // Nokia 3310\n')),(0,i.kt)("h3",{id:"-stringnew"},"\u25c9 ",(0,i.kt)("inlineCode",{parentName:"h3"},"String::new")),(0,i.kt)("p",null,"Associated function ",(0,i.kt)("inlineCode",{parentName:"p"},"String::new")," menghasilkan data string kosong."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let str3 = String::new();\nprintln!("{str3}"); // ""\n')),(0,i.kt)("h3",{id:"-stringfrom_utf8"},"\u25c9 ",(0,i.kt)("inlineCode",{parentName:"h3"},"String::from_utf8")),(0,i.kt)("p",null,"Berguna untuk mengkonversi data bytes ke tipe ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),". Fungsi ini nilai baliknya bertipe ",(0,i.kt)("inlineCode",{parentName:"p"},"Result<String, FromUtf8Error>"),", maka dalam penerapannya harus di-chain dengan method ",(0,i.kt)("inlineCode",{parentName:"p"},"unwrap")," untuk mendapatkan data ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),"-nya."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let str4 = String::from_utf8(vec![78, 55, 51]).unwrap();\nprintln!("{str4}"); // N73\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Lebih jelasnya mengenai tipe ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," dibahas pada chapter ",(0,i.kt)("a",{parentName:"p",href:"/basic/result-type"},"Tipe Data \u279c Result"))),(0,i.kt)("h2",{id:"a452-string-mutability"},"A.45.2. String mutability"),(0,i.kt)("h3",{id:"-keyword-mut"},"\u25c9 Keyword ",(0,i.kt)("inlineCode",{parentName:"h3"},"mut")),(0,i.kt)("p",null,"Keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"mut")," bisa digunakan untuk mengganti/replace data string dengan data baru. Sebagai contoh, ",(0,i.kt)("inlineCode",{parentName:"p"},"str5")," berikut yang awalnya adalah string kosong di-replace dengan ",(0,i.kt)("inlineCode",{parentName:"p"},"Pixel 5"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let mut str5 = String::new();\nprintln!("{str5}");\n// ""\n\nstr5 = String::from("Pixel 5");\nprintln!("{str5}");\n// Pixel 5\n')),(0,i.kt)("h3",{id:"-replace-string--method-replace"},"\u25c9 Replace string / method ",(0,i.kt)("inlineCode",{parentName:"h3"},"replace")),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"replace")," digunakan untuk mengganti suatu substring dengan string lain. Method ini menghasilkan object ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," baru dan tidak mengubah data string aslinya. Karena alasan itu juga kenapa tidak perlu menggunakan keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"mut")," dalam penerapannya."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let str9 = String::from("my phone is Pixel 6");\nlet str10 = str9.replace("Pixel 6", "Nokia 3310");\n\nprintln!("str9: {str9}");   // my phone is Pixel 6\nprintln!("str10: {str10}"); // my phone is Nokia 3310\n')),(0,i.kt)("h3",{id:"-prepend-string--method-insert_str"},"\u25c9 Prepend string / method ",(0,i.kt)("inlineCode",{parentName:"h3"},"insert_str")),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"insert_str")," digunakan untuk menyisipkan substring pada posisi tertentu."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let mut str6 = String::from("Pixel 6");\nprintln!("{str6}");\n// Pixel 6\n\nstr6.insert_str(0, "my phone");\nprintln!("{str6}");\n// my phonePixel 6\n\nstr6.insert_str(8, " is ");\nprintln!("{str6}");\n// my phone is Pixel 6\n')),(0,i.kt)("p",null,"Parameter pertama menentukan posisi indeks string yang disisipkan."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"String ",(0,i.kt)("inlineCode",{parentName:"li"},"Pixel 6")," pada indeks 0 disisipi string ",(0,i.kt)("inlineCode",{parentName:"li"},"my phone"),", hasilnya ",(0,i.kt)("inlineCode",{parentName:"li"},"my phonePixel 6")),(0,i.kt)("li",{parentName:"ul"},"String ",(0,i.kt)("inlineCode",{parentName:"li"},"my phonePixel 6")," pada indeks 8 disisipi string ",(0,i.kt)("inlineCode",{parentName:"li"},"is"),", hasilnya ",(0,i.kt)("inlineCode",{parentName:"li"},"my phone is Pixel 6"))),(0,i.kt)("h3",{id:"-prepend-char--method-insert"},"\u25c9 Prepend char / method ",(0,i.kt)("inlineCode",{parentName:"h3"},"insert")),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"insert")," kegunaannya sama seperti ",(0,i.kt)("inlineCode",{parentName:"p"},"insert_str")," yaitu untuk menyisipkan string pada posisi tertentu. Perbedaannya, pada method ",(0,i.kt)("inlineCode",{parentName:"p"},"insert")," parameter kedua diisi dengan char."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let mut str7 = String::from(\"3310\");\n\nstr7.insert(0, 'N'); // N3310\nstr7.insert(1, 'o'); // No3310\nstr7.insert(2, 'k'); // Nok3310\nstr7.insert(3, 'i'); // Noki3310\nstr7.insert(4, 'a'); // Nokia3310\nstr7.insert(5, ' '); // Nokia 3310\n")),(0,i.kt)("h3",{id:"-append-string--method-push_str"},"\u25c9 Append string / method ",(0,i.kt)("inlineCode",{parentName:"h3"},"push_str")),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"push_str")," digunakan untuk menambahkan string di akhir."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let mut str8 = String::from("Pixel 6"); // Pixel 6\nstr8.push_str(" is a good phone");      // Pixel 6 is a good phone\n')),(0,i.kt)("h3",{id:"-append-char--method-push"},"\u25c9 Append char / method ",(0,i.kt)("inlineCode",{parentName:"h3"},"push")),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"push")," sama kegunaannya seperti ",(0,i.kt)("inlineCode",{parentName:"p"},"push_str"),", namun untuk penambahan data ",(0,i.kt)("inlineCode",{parentName:"p"},"char"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let mut str8 = String::from("Pixel");\n\nstr8.push(\' \'); // "Pixel "\nstr8.push(\'7\'); // "Pixel 7"\n')),(0,i.kt)("h3",{id:"-clear-string--method-clear"},"\u25c9 Clear string / method ",(0,i.kt)("inlineCode",{parentName:"h3"},"clear")),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"clear")," digunakan untuk mengosongkan data string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let mut str11 = String::from("Nokia 3310");\nstr11.clear();\nprintln!("{str11}"); // ""\n')),(0,i.kt)("h2",{id:"a453-operasi-string-lainnya"},"A.45.3. Operasi string lainnya"),(0,i.kt)("h3",{id:"-cek-substring--method-contains"},"\u25c9 Cek substring / method ",(0,i.kt)("inlineCode",{parentName:"h3"},"contains")),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"contains")," digunakan untuk mengecek apakah suatu substring yang dicari ada atau tidak. Method ini mengembalikan nilai bertipe ",(0,i.kt)("inlineCode",{parentName:"p"},"bool"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let str11 = String::from("Nokia 3310");\n\nlet is_exists = str11.contains("3310");\nprintln!("{is_exists}"); // true\n\nlet is_exists = str11.contains("3315");\nprintln!("{is_exists}"); // false\n')),(0,i.kt)("h3",{id:"-concat-strings--slice-join"},"\u25c9 Concat strings / slice ",(0,i.kt)("inlineCode",{parentName:"h3"},"join")),(0,i.kt)("p",null,"Operasi concat string bisa dilakukan memanfaatkan method ",(0,i.kt)("inlineCode",{parentName:"p"},"insert_str")," atau ",(0,i.kt)("inlineCode",{parentName:"p"},"push_str"),". Selain itu juga bisa dengan menggunakan method ",(0,i.kt)("inlineCode",{parentName:"p"},".join")," milik slice. Caranya, jadikan string yang ingin di-gabung sebagai element array, kemudian akses method ",(0,i.kt)("inlineCode",{parentName:"p"},".join"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let str12 = String::from("iPhone");\nlet str13 = String::from("12");\nlet str14 = String::from("Pro");\n\nlet str: String = [str12, str13, str14].join(" ");\n\nprintln!("{str}"); // iPhone 12 Pro\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"catatan-chapter-"},"Catatan chapter \ud83d\udcd1"),(0,i.kt)("h3",{id:"-source-code-praktik"},"\u25c9 Source code praktik"),(0,i.kt)("pre",null,(0,i.kt)("a",{href:"https://github.com/novalagung/dasarpemrogramanrust-example/tree/master/tipe_data_custom_type_string_slice"},"github.com/novalagung/dasarpemrogramanrust-example/../tipe_data_custom_type_string_slice")),(0,i.kt)("h3",{id:"-chapter-relevan-lainnya"},"\u25c9 Chapter relevan lainnya"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/basic/tipe-data-string-literal"},"Tipe Data \u279c String Literal (&str)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/basic/static"},"Static Item")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/basic/lifetime"},"Lifetime")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/basic/slice-memory-management"},"Slice Memory Management")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/basic/string-slice-vs-string-literal"},"String Literal (&str) vs. String Custom Type"))),(0,i.kt)("h3",{id:"-referensi"},"\u25c9 Referensi"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/string/struct.String.html"},"https://doc.rust-lang.org/std/string/struct.String.html"))))}m.isMDXComponent=!0}}]);