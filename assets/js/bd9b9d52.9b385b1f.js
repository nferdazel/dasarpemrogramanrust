"use strict";(self.webpackChunkdasarpemrogramanrust=self.webpackChunkdasarpemrogramanrust||[]).push([[909],{3905:(a,e,t)=>{t.d(e,{Zo:()=>k,kt:()=>o});var n=t(7294);function i(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function r(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,n)}return t}function l(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){i(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function p(a,e){if(null==a)return{};var t,n,i=function(a,e){if(null==a)return{};var t,n,i={},r=Object.keys(a);for(n=0;n<r.length;n++)t=r[n],e.indexOf(t)>=0||(i[t]=a[t]);return i}(a,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(a);for(n=0;n<r.length;n++)t=r[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(i[t]=a[t])}return i}var u=n.createContext({}),d=function(a){var e=n.useContext(u),t=e;return a&&(t="function"==typeof a?a(e):l(l({},e),a)),t},k=function(a){var e=d(a.components);return n.createElement(u.Provider,{value:e},a.children)},s={inlineCode:"code",wrapper:function(a){var e=a.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(a,e){var t=a.components,i=a.mdxType,r=a.originalType,u=a.parentName,k=p(a,["components","mdxType","originalType","parentName"]),m=d(t),o=i,g=m["".concat(u,".").concat(o)]||m[o]||s[o]||r;return t?n.createElement(g,l(l({ref:e},k),{},{components:t})):n.createElement(g,l({ref:e},k))}));function o(a,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof a||i){var r=t.length,l=new Array(r);l[0]=m;var p={};for(var u in e)hasOwnProperty.call(e,u)&&(p[u]=e[u]);p.originalType=a,p.mdxType="string"==typeof a?a:i,l[1]=p;for(var d=2;d<r;d++)l[d]=t[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5943:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>l,default:()=>s,frontMatter:()=>r,metadata:()=>p,toc:()=>d});var n=t(7462),i=(t(7294),t(3905));const r={sidebar_position:5,title:"A.5. Tipe Data \u2192 Primitive Scalar",sidebar_label:"A.5. Tipe Data \u2192 Primitive Scalar"},l=void 0,p={unversionedId:"basic/tipe-data-primitive-scalar",id:"basic/tipe-data-primitive-scalar",title:"A.5. Tipe Data \u2192 Primitive Scalar",description:"Tipe data di Rust dikategorikan menjadi beberapa group, salah satunya adalah group tipe data primitif scalar atau biasa disebut scalar types. Pada chapter ini kita akan mempelajarinya.",source:"@site/docs/basic/tipe-data-primitive-scalar.md",sourceDirName:"basic",slug:"/basic/tipe-data-primitive-scalar",permalink:"/basic/tipe-data-primitive-scalar",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"A.5. Tipe Data \u2192 Primitive Scalar",sidebar_label:"A.5. Tipe Data \u2192 Primitive Scalar"},sidebar:"tutorialSidebar",previous:{title:"A.4. Variabel",permalink:"/basic/variabel"},next:{title:"A.6. Tipe Data \u2192 String Literal (&str)",permalink:"/basic/tipe-data-string-literal"}},u={},d=[{value:"A.5.1. Signed integers",id:"a51-signed-integers",level:2},{value:"A.5.2. Unsigned integers",id:"a52-unsigned-integers",level:2},{value:"A.5.3. Floating point",id:"a53-floating-point",level:2},{value:"A.5.4. Bool",id:"a54-bool",level:2},{value:"A.5.5. Char",id:"a55-char",level:2},{value:"A.5.6. Pointer scalar",id:"a56-pointer-scalar",level:2},{value:"A.5.7. Tipe data primitive compound",id:"a57-tipe-data-primitive-compound",level:2},{value:"Catatan chapter \ud83d\udcd1",id:"catatan-chapter-",level:2},{value:"\u25c9 Source code praktik",id:"-source-code-praktik",level:3},{value:"\u25c9 Chapter relevan lainnya",id:"-chapter-relevan-lainnya",level:3},{value:"\u25c9 Referensi",id:"-referensi",level:3}],k={toc:d};function s(a){let{components:e,...r}=a;return(0,i.kt)("wrapper",(0,n.Z)({},k,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Tipe data di Rust dikategorikan menjadi beberapa group, salah satunya adalah group tipe data primitif scalar atau biasa disebut ",(0,i.kt)("strong",{parentName:"p"},"scalar types"),". Pada chapter ini kita akan mempelajarinya."),(0,i.kt)("p",null,"Tipe data scalar sendiri merupakan tipe data primitif yang isinya hanya 1 nilai. Rust memiliki 4 tipe scalar, yaitu integers, floating-point, boolean, dan character."),(0,i.kt)("h2",{id:"a51-signed-integers"},"A.5.1. Signed integers"),(0,i.kt)("p",null,"Signed integer merupakan tipe data numerik/integer yang bisa menampung nilai positif dan juga negatif. Ada beberapa tipe data singed integer tersedia di Rust yang dibedakan sesuai size-nya."),(0,i.kt)("p",null,"Tipe data ini keyword-nya ditandai dengan huruf awalan ",(0,i.kt)("inlineCode",{parentName:"p"},"i"),", contohnya ",(0,i.kt)("inlineCode",{parentName:"p"},"i8"),", yang dimana tipe ini adalah tipe data numerik integer dengan range value yang bisa ditampung adalah mulai dari angka ",(0,i.kt)("strong",{parentName:"p"},"\u2212128")," (didapat dari \u2212(2",(0,i.kt)("sup",null,"7"),") hingga ",(0,i.kt)("strong",{parentName:"p"},"127")," (didapat dari 2",(0,i.kt)("sup",null,"7"),"-1)."),(0,i.kt)("p",null,"Contoh:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let numerik1 = 24;\nlet numerik2: i8 = 2;\nlet numerik3: i64 = 12;\n\nprintln!("{} | {} | {}", numerik1, numerik2, numerik3);\n// output ==> 24 | 2 | 12\n')),(0,i.kt)("p",null,"Dengan menggunakan teknik deklarasi ",(0,i.kt)("em",{parentName:"p"},"type inference"),", maka default angka numerik tipe datanya adalah ",(0,i.kt)("inlineCode",{parentName:"p"},"i32"),"."),(0,i.kt)("p",null,"Range value pada tipe data itu cukup penting untuk diperhatikan, jika ada sebuah variabel yang tipe datanya pasti dan diisi dengan nilai di luar kapasitas yang bisa ditampung, maka akan muncul error. Contoh, tipe data ",(0,i.kt)("inlineCode",{parentName:"p"},"i8"),", jika diisi nilai ",(0,i.kt)("inlineCode",{parentName:"p"},"128")," maka error."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"data type error",src:t(4362).Z,width:"642",height:"488"})),(0,i.kt)("p",null,"Umumnya, tipe data ",(0,i.kt)("inlineCode",{parentName:"p"},"i32")," cukup untuk kebutuhan menampung nilai, tapi ada banyak case dimana kita perlu tipe dengan size yang lebih besar seperti ",(0,i.kt)("inlineCode",{parentName:"p"},"i64"),"."),(0,i.kt)("p",null,"Berikut merupakan list tipe data signed integers yang ada di Rust. Tidak perlu dihafal."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Tipe data"),(0,i.kt)("th",{parentName:"tr",align:null},"Deskripsi"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"i8")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2212(2",(0,i.kt)("sup",null,"7"),") hingga (2",(0,i.kt)("sup",null,"7"),")-1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"i16")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2212(2",(0,i.kt)("sup",null,"15"),") hingga (2",(0,i.kt)("sup",null,"15"),")-1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"i32")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2212(2",(0,i.kt)("sup",null,"31"),") hingga (2",(0,i.kt)("sup",null,"31"),")-1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"i64")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2212(2",(0,i.kt)("sup",null,"63"),") hingga (2",(0,i.kt)("sup",null,"63"),")-1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"i128")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2212(2",(0,i.kt)("sup",null,"127"),") hingga (2",(0,i.kt)("sup",null,"127"),")-1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"isize")),(0,i.kt)("td",{parentName:"tr",align:null},"tipe pointer")))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Lebih jelasnya tentang tipe data ",(0,i.kt)("strong",{parentName:"p"},"pointer")," dibahas pada chapter terpisah, ",(0,i.kt)("a",{parentName:"p",href:"/basic/pointer-references"},"Pointer & References"))),(0,i.kt)("h2",{id:"a52-unsigned-integers"},"A.5.2. Unsigned integers"),(0,i.kt)("p",null,"Perbedaan antara signed dan unsigned adalah pada range value yang ditampung, size-nya sama, hanya angka minimal dan maksimalnya berbeda."),(0,i.kt)("p",null,"Unsigned di sini maksudnya adalah hanya bisa menampung angka mulai dari 0. Tipe data unsigned tidak bisa menampung angka negatif (jika dipaksa akan memunculkan error)."),(0,i.kt)("p",null,"Berikut list tipe data unsigned integer pada Rust:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Tipe data"),(0,i.kt)("th",{parentName:"tr",align:null},"Deskripsi"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"u8")),(0,i.kt)("td",{parentName:"tr",align:null},"0 hingga (2",(0,i.kt)("sup",null,"8"),")-1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"u16")),(0,i.kt)("td",{parentName:"tr",align:null},"0 hingga (2",(0,i.kt)("sup",null,"16"),")-1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"u32")),(0,i.kt)("td",{parentName:"tr",align:null},"0 hingga (2",(0,i.kt)("sup",null,"32"),")-1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"u64")),(0,i.kt)("td",{parentName:"tr",align:null},"0 hingga (2",(0,i.kt)("sup",null,"64"),")-1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"u128")),(0,i.kt)("td",{parentName:"tr",align:null},"0 hingga (2",(0,i.kt)("sup",null,"128"),")-1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"usize")),(0,i.kt)("td",{parentName:"tr",align:null},"tipe pointer")))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Lebih jelasnya tentang tipe data ",(0,i.kt)("strong",{parentName:"p"},"pointer")," dibahas pada chapter terpisah, ",(0,i.kt)("a",{parentName:"p",href:"/basic/pointer-references"},"Pointer & References"))),(0,i.kt)("p",null,"Contoh penerapan unsigned integer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let numerik4: u32 = 28;\nlet numerik5: u8 = 16;\nlet numerik6: u64 = 42;\n\nprintln!("{} | {} | {}", numerik4, numerik5, numerik6);\n// output ==> 28 | 16 | 42\n')),(0,i.kt)("p",null,"Catatan saja, variabel yang dideklarasikan dengan predefined value adalah numerik, by default tipe datanya adalah ",(0,i.kt)("inlineCode",{parentName:"p"},"i32")," (signed)."),(0,i.kt)("h2",{id:"a53-floating-point"},"A.5.3. Floating point"),(0,i.kt)("p",null,"Floating point adalah tipe data yang mendukung nilai dibelakang koma, contohnya seperti ",(0,i.kt)("inlineCode",{parentName:"p"},"3.14"),". Di Rust ada dua tipe data floating point, yaitu ",(0,i.kt)("inlineCode",{parentName:"p"},"f34")," dan ",(0,i.kt)("inlineCode",{parentName:"p"},"f64"),". Contoh penggunaan:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let fp1: f32 = 3.14;\nlet fp2: f64 = 3.1415926535;\n\nprintln!("{} | {:.5}", fp1, fp2);\n// output ==> 3.14 | 3.14159\n')),(0,i.kt)("p",null,"O iya, jumlah digit di belakang koma bisa diatur saat diprint menggunakan ",(0,i.kt)("inlineCode",{parentName:"p"},"println"),". Caranya dengan menggunakan notasi ",(0,i.kt)("inlineCode",{parentName:"p"},"{:.n}"),". Sebagai contoh ",(0,i.kt)("inlineCode",{parentName:"p"},"{:.5}")," maka akan menampilkan hanya 5 digit dibelakang koma."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Dalam penerapan definisi variabel sekaligus nilai, jika nilai dituliskan dalam desimal seperti contohnya ",(0,i.kt)("inlineCode",{parentName:"p"},"24"),", maka tipe data variabel penampung adalah numerik."),(0,i.kt)("p",{parentName:"blockquote"},"Jika dituliskan dalam notasi floating point, contohnya ",(0,i.kt)("inlineCode",{parentName:"p"},"3.14"),", maka tipe data variabel penampung adalah float.")),(0,i.kt)("h2",{id:"a54-bool"},"A.5.4. Bool"),(0,i.kt)("p",null,"Tipe data ",(0,i.kt)("inlineCode",{parentName:"p"},"bool")," menerima dua pilihan nilai saja, ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," atau ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let b1 = true;\nlet b2 = false;\n\nprintln!("{} | {}", b1, b2);\n// output ==> true | false\n')),(0,i.kt)("h2",{id:"a55-char"},"A.5.5. Char"),(0,i.kt)("p",null,"Tipe ",(0,i.kt)("inlineCode",{parentName:"p"},"char")," menampung sebuah data (unicode), contohnya seperti ",(0,i.kt)("inlineCode",{parentName:"p"},"'n'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'-'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'2'"),". Penulisan literal untuk tipe ini menggunakan notasi ",(0,i.kt)("inlineCode",{parentName:"p"},"''"),", diapit tanda petik satu."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let c1 = 'n';\nlet c2 = '-';\nlet c3 = '2';\n\nprintln!(\"{} | {} | {}\", c1, c2, c3);\n// output ==> n | - | 2\n")),(0,i.kt)("h2",{id:"a56-pointer-scalar"},"A.5.6. Pointer scalar"),(0,i.kt)("p",null,"Deklarasi tipe data pointer cukup mudah, yaitu dengan menuliskan deklarasinya seperti biasa tapi ditambahkan karakter ",(0,i.kt)("inlineCode",{parentName:"p"},"&"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let ptr1: &i32 = &24;\nprintln!("{}", ptr1);\n// output ==> 24\n')),(0,i.kt)("p",null,"Perihal apa itu tipe data pointer dan apa kegunaan prefix ",(0,i.kt)("inlineCode",{parentName:"p"},"&")," akan dibahas pada chapter terpisah, yaitu ",(0,i.kt)("a",{parentName:"p",href:"/basic/pointer-references"},"Pointer & References"),"."),(0,i.kt)("h2",{id:"a57-tipe-data-primitive-compound"},"A.5.7. Tipe data primitive compound"),(0,i.kt)("p",null,"Selain beberapa tipe data yang sudah dibahas di atas, ada juga jenis tipe data primitif jenis lainnya, yaitu primitive compound yang di antaranya adalah ",(0,i.kt)("a",{parentName:"p",href:"/basic/array"},"Array"),", ",(0,i.kt)("a",{parentName:"p",href:"/basic/slice"},"Slice"),", ",(0,i.kt)("a",{parentName:"p",href:"/basic/tuple"},"Tuple"),", dan string. Tipe-tipe tersebut dibahas pada chapter terpisah."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"catatan-chapter-"},"Catatan chapter \ud83d\udcd1"),(0,i.kt)("h3",{id:"-source-code-praktik"},"\u25c9 Source code praktik"),(0,i.kt)("pre",null,(0,i.kt)("a",{href:"https://github.com/novalagung/dasarpemrogramanrust-example/tree/master/tipe_data_primitive_scalar"},"github.com/novalagung/dasarpemrogramanrust-example/../tipe_data_primitive_scalar")),(0,i.kt)("h3",{id:"-chapter-relevan-lainnya"},"\u25c9 Chapter relevan lainnya"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/basic/tipe-data-string-literal"},"Tipe Data \u2192 String Literal (&str)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/basic/array"},"Array")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/basic/slice"},"Slice (Basic)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/basic/tuple"},"Tuple")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/basic/tipe-data-custom-type-string-slice"},"Tipe Data \u2192 String Custom Type"))),(0,i.kt)("h3",{id:"-referensi"},"\u25c9 Referensi"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/rust-by-example/primitives.html"},"https://doc.rust-lang.org/rust-by-example/primitives.html")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/fmt/index.html#syntax"},"https://doc.rust-lang.org/std/fmt/index.html#syntax")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Integer_(computer_science)"},"https://en.wikipedia.org/wiki/Integer_(computer_science)"))),(0,i.kt)("hr",null))}s.isMDXComponent=!0},4362:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/tipe-data-primitive-scalar-1-7710e1ad76b0cc40fbae8a8d42ead294.png"}}]);